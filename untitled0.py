# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oZeLZa4UKYe7NPTdwn9WlBD0-c9dU89Z

verileri toplama
"""

from google.colab import drive
drive.mount('/content/drive')

import os
os.chdir('/content/drive/My Drive/verimadenciliği/proje-odevi')
!pwd

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""veri setimizden ilk 10 satırı gösterme"""

df=pd.read_csv('StudentPerformanceFactors.csv')
df.head(10)

"""verilerin hazırlanması"""

# Eksik verileri kontrol et ve temizle
print(df.isnull().sum())
df = df.dropna()

# Aşırı uç değerleri kaldır
Q1 = df['Exam_Score'].quantile(0.25)
Q3 = df['Exam_Score'].quantile(0.75)
IQR = Q3 - Q1
outliers = df[(df['Exam_Score'] < (Q1 - 1.5 * IQR)) | (df['Exam_Score'] > (Q3 + 1.5 * IQR))]
df = df[~df.index.isin(outliers.index)]

# Veri türü dönüşümü
df['Exam_Score'] = pd.to_numeric(df['Exam_Score'], errors='coerce')

from sklearn.preprocessing import MinMaxScaler

# Motivation_Level sütununu kategorik değerlerden sayısal değerlere dönüştürme
df['Motivation_Level'] = df['Motivation_Level'].map({'Low': 1, 'Medium': 2, 'High': 3})

# MinMaxScaler ile Normalizasyon
scaler = MinMaxScaler()
df[['Motivation_Level', 'Exam_Score']] = scaler.fit_transform(df[['Motivation_Level', 'Exam_Score']])

# Tekrarlanan satırları kaldır
df = df.drop_duplicates()

"""motivasyon kısmı burada görselleştirliyor"""

import seaborn as sns
import matplotlib.pyplot as plt

# Grafik çizimi, legend=False ile palette parametresinin etkili olmasını sağlama
sns.countplot(x=df['Motivation_Level'], palette='Set2', legend=False)

# Başlık ekleme
plt.title("Motivation Level Distribution")

# Grafiği gösterme
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Veri setini yükleme
df = pd.read_csv('StudentPerformanceFactors.csv')

# Scatter plot
plt.figure(figsize=(8, 6))
sns.scatterplot(data=df, x='Motivation_Level', y='Exam_Score', color='blue', s=100)

# Grafik başlık ve etiketler
plt.title('Motivation Level vs Exam Score', fontsize=16)
plt.xlabel('Motivation Level', fontsize=14)
plt.ylabel('Exam Score', fontsize=14)

# Grafik gösterimi
plt.grid(True)
plt.show()

"""Hours_Studied ve Exam_Score karşılaştırılması burada"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Histogram
plt.figure(figsize=(8, 6))
sns.histplot(df['Hours_Studied'], bins=6, kde=True, color='skyblue')

plt.title('Distribution of Hours Studied', fontsize=16)
plt.xlabel('Hours Studied', fontsize=14)
plt.ylabel('Frequency', fontsize=14)
plt.grid(True)
plt.show()

"""Previous_Scores ve Exam_Score İlişkisi (Scatter Plot)"""

import matplotlib.pyplot as plt
import seaborn as sns

# Scatter plot
plt.figure(figsize=(8, 6))
sns.scatterplot(data=df, x='Previous_Scores', y='Exam_Score', color='blue', s=100)

plt.title('Previous Scores vs Exam Score', fontsize=16)
plt.xlabel('Previous Scores', fontsize=14)
plt.ylabel('Exam Score', fontsize=14)
plt.grid(True)
plt.show()

"""Sleep_Hours ve Exam_Score İlişkisi (Scatter Plot)"""

# Scatter plot
plt.figure(figsize=(8, 6))
sns.scatterplot(data=df, x='Sleep_Hours', y='Exam_Score', color='green', s=100)

plt.title('Sleep Hours vs Exam Score', fontsize=16)
plt.xlabel('Sleep Hours', fontsize=14)
plt.ylabel('Exam Score', fontsize=14)
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Scatter plot
plt.figure(figsize=(8, 6))
sns.scatterplot(data=df, x='Hours_Studied', y='Exam_Score', color='green', s=100)

# Grafik başlık ve etiketler
plt.title('Hours Studied vs Exam Score', fontsize=16)
plt.xlabel('Hours Studied', fontsize=14)
plt.ylabel('Exam Score', fontsize=14)

# Grafik gösterimi
plt.grid(True)
plt.show()

"""cinsiyet ve öğrenci notunun karşılaştırılması

"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Gender ve Exam_Score sütunlarının mevcut olup olmadığını kontrol etme
if 'Gender' in df.columns and 'Exam_Score' in df.columns:
    # Gender'e göre ortalama Exam Score hesaplama
    gender_avg_scores = df.groupby('Gender')['Exam_Score'].mean().reset_index()

    # Bar Plot
    plt.figure(figsize=(8, 6))
    sns.barplot(data=gender_avg_scores, x='Gender', y='Exam_Score', palette='pastel')

    plt.title('Average Exam Score by Gender', fontsize=16)
    plt.xlabel('Gender', fontsize=14)
    plt.ylabel('Average Exam Score', fontsize=14)
    plt.grid(True)
    plt.show()
else:
    print("Gender veya Exam_Score sütunu veri setinde mevcut değil.")

"""Birden Fazla Değeri Birleştiren Görselleştirme"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Gerekli sütunların mevcut olup olmadığını kontrol etme
required_columns = ['Motivation_Level', 'Hours_Studied', 'Exam_Score', 'Gender']
missing_columns = [col for col in required_columns if col not in df.columns]

if not missing_columns:
    # Pair Plot
    sns.pairplot(df[required_columns], hue='Gender', diag_kind='kde', palette='Set2')

    plt.suptitle('Pair Plot of Motivation, Hours Studied, and Exam Score', y=1.02, fontsize=16)
    plt.show()
else:
    print(f"Veri setinde eksik sütunlar var: {', '.join(missing_columns)}")

"""Yüzdesel Dağılım ve Etkilerin Görselleştirilmesi
Bu aşamada Motivation_Level, Hours_Studied, Exam_Score, ve Gender değişkenlerinin genel etkisini bir Heatmap (Isı Haritası) ve kategorik yüzdesel dağılım ile görselleştireceğiz.
"""

# Gender Yüzdesel Dağılımı
gender_percentage = df['Gender'].value_counts(normalize=True) * 100

# Bar Plot
plt.figure(figsize=(8, 6))
sns.barplot(x=gender_percentage.index, y=gender_percentage.values, palette='pastel')

# Grafik Başlık ve Etiketler
plt.title('Percentage Distribution of Gender', fontsize=16)
plt.xlabel('Gender', fontsize=14)
plt.ylabel('Percentage (%)', fontsize=14)
plt.ylim(0, 100)

# Yüzdelik Etiketler
for i, val in enumerate(gender_percentage.values):
    plt.text(i, val + 1, f'{val:.1f}%', ha='center', fontsize=12)

plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Gerekli sütunları belirleme
numerical_columns = ['Motivation_Level', 'Hours_Studied', 'Exam_Score']

# Motivation_Level sütununu kategorik değerlerden sayısal değerlere dönüştürme (eğer dönüşüm yapılmamışsa)
if 'Motivation_Level' in df.columns and df['Motivation_Level'].dtype == 'object':
    df['Motivation_Level'] = df['Motivation_Level'].map({'Low': 1, 'Medium': 2, 'High': 3})

# Sayısal olmayan değerleri sayısala çevirme ve eksik değerleri temizleme
df = df.dropna(subset=numerical_columns)

# Korelasyon matrisi oluşturma
correlation_matrix = df[numerical_columns].corr()

# Korelasyon matrisini görselleştirme
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, fmt='.2f', cmap='coolwarm', cbar=True)
plt.title('Correlation Heatmap of Variables', fontsize=16)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Gender'e göre ortalama Exam_Score hesaplama ve görselleştirme
if 'Gender' in df.columns and 'Exam_Score' in df.columns:
    gender_effect = df.groupby('Gender', as_index=False)['Exam_Score'].mean()

    # Bar Plot
    plt.figure(figsize=(8, 6))
    sns.barplot(data=gender_effect, x='Gender', y='Exam_Score', palette='Set2')

    plt.title('Average Exam Score by Gender', fontsize=16)
    plt.xlabel('Gender', fontsize=14)
    plt.ylabel('Average Exam Score', fontsize=14)
    plt.ylim(0, 100)
    plt.grid(True)
    plt.show()
else:
    print("Gender veya Exam_Score sütunu veri setinde mevcut değil.")

"""3. aşamaya geçiyoruz artık makine öğrenmesi yapacağız.

Hedef ve Özelliklerin Seçilmesi
"""

# Özellikler ve hedef değişken
required_columns = ['Motivation_Level', 'Hours_Studied', 'Previous_Scores', 'Attendance', 'Exam_Score']
missing_columns = [col for col in required_columns if col not in df.columns]

if not missing_columns:
    X = df[['Motivation_Level', 'Hours_Studied', 'Previous_Scores', 'Attendance']]  # Bağımsız değişkenler
    y = df['Exam_Score']  # Hedef değişken
    print("Bağımsız ve hedef değişkenler başarıyla tanımlandı.")
else:
    print(f"Veri setinde eksik sütunlar var: {', '.join(missing_columns)}")

from sklearn.preprocessing import LabelEncoder

# Gender değişkenini sayısal değere çevirme
label_encoder = LabelEncoder()
df['Gender'] = label_encoder.fit_transform(df['Gender'])  # Male=1, Female=0

"""Veri Bölme
Modeli eğitmek için veriyi iki parçaya ayırmalısınız:

Eğitim Verisi (Training Data): Modelin öğrenmesi için (%60)
Test Verisi (Testing Data): Modelin doğruluğunu değerlendirmek için (%40) ayrıldı


"""

from sklearn.model_selection import train_test_split
# Veriyi eğitim ve test kümelerine ayırma
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)

from sklearn.linear_model import ElasticNet

# ElasticNet Regression modeli oluşturma
elastic_net_model = ElasticNet(alpha=1.0, l1_ratio=0.5, random_state=42)

# Modeli eğitme (önceden oluşturulmuş eğitim verisi kullanılarak)
elastic_net_model.fit(X_train, y_train)

print("ElasticNet Regression Modeli başarıyla eğitildi.")

"""4. Aşamaya geçtik"""

from sklearn.metrics import mean_squared_error, r2_score
from sklearn.linear_model import ElasticNet

# Test verilerinden tahmin yap
y_pred = elastic_net_model.predict(X_test)

# Performans değerlendirme metrikleri
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("ElasticNet Regression Performansı:")
print("Mean Squared Error (MSE):", mse)
print("R² Score:", r2)

"""5. aşamaya geçiyoruz performansın arttırılması

linear Regression ile deneme
"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import pandas as pd

# Gerekli sütunların mevcut olup olmadığını kontrol et
required_columns = ['Motivation_Level', 'Hours_Studied', 'Previous_Scores', 'Attendance', 'Exam_Score']
missing_columns = [col for col in required_columns if col not in df.columns]

if not missing_columns:
    # Bağımsız ve bağımlı değişkenleri ayırma
    X = df[['Motivation_Level', 'Hours_Studied', 'Previous_Scores', 'Attendance']]
    y = df['Exam_Score']

    # Linear Regression modeli oluşturma
    lr_model = LinearRegression()

    # Eğitim verisiyle modeli eğitme
    lr_model.fit(X_train, y_train)

    # Test verisi üzerinde tahmin
    y_pred = lr_model.predict(X_test)

    # Performans ölçümleri
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    print("Linear Regression Model Performansı:")
    print("Mean Squared Error (MSE):", mse)
    print("R² Score:", r2)
else:
    print(f"Veri setinde eksik sütunlar var: {', '.join(missing_columns)}")

"""NOT: Ridge Regression ile yaptığımız deneme daha iyi sonuç verdi."""